@page "/druzyny/edit/{id}"
@page "/druzyny/edit"
@attribute [Authorize(Roles = "Administrator")]


@inject IDruzynyService DruzynyService

@if (id == null)
{
	<PageTitle>Dodaj</PageTitle>
	<h3>Dodaj drużynę</h3>
}
else
{
	<PageTitle>Edytuj</PageTitle>
	<h3>Edytuj @team.IdDruzyny</h3>
}

<EditForm Model="team" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator/>
	@if (id == null)
	{
		<div>
			<label for="nick">Nick</label>
			<InputText id="nick" @bind-Value="team.IdDruzyny" class="form-control"></InputText>
			<ValidationMessage For="@(() => team.IdDruzyny)" />
		</div>
	}
	<div>
		<label for="nazwa">Nazwa</label>
		<InputText id="nazwa" @bind-Value="team.Nazwa" class="form-control"></InputText>
		<ValidationMessage For="@(() => team.Nazwa)" />
	</div>
	<div>
		<label for="opis">Opis</label>
		<InputTextArea id="opis" @bind-Value="team.Opis" class="form-control"></InputTextArea>
		<ValidationMessage For="@(() => team.Opis)" />
	</div>
	<div>
		<label for="liga">Liga</label>
		<InputSelect id="liga" @bind-Value="team.Liga" class="form-control">
			@foreach (var league in leagues)
			{
				<option value="@league">@league</option>
			}
		</InputSelect>
	</div>
	<div>
		<label for="logo">Logo</label>
		<InputFile OnChange="OnFileChangeLogo" class="form-control"></InputFile>
		<ValidationMessage For="@(() => team.Logo)" />
	</div>
	<div>
		<label for="zdjeciezawodnikow">Zdjęcie Zawodników</label>
		<InputFile OnChange="OnFileChangeImage" class="form-control"></InputFile>
	</div>
	<button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit">@btnText</button>
	<button type="button" class="btn btn-danger" @onclick="DeleteTeam">Usuń drużynę</button>
</EditForm>

@code
{
	string btnText = string.Empty;

	[Parameter]
	public string? id { get; set; }

	Druzyny team = new Druzyny();

	List<string> leagues = new List<string>
	{
		"LCK",
		"LPL",
		"LCS",
		"LEC",
		"PCS",
		"VCS",
		"CBLOL",
		"LJL",
		"LLA"
	};

	protected override async Task OnInitializedAsync()
	{
		btnText = id == null ? "Zapisz nową drużynę" : "Aktualizuj drużynę";

		await DruzynyService.GetTeams();
	}

	protected override async Task OnParametersSetAsync()
	{
		if (!String.IsNullOrEmpty(id))
		{
			team = await DruzynyService.GetSingleTeam(id);
		}
	}

	async Task HandleValidSubmit()
	{
		if (id == null)
		{
			await DruzynyService.CreateTeam(team);
		}
		else
		{
			await DruzynyService.UpdateTeam(team);
		}

	}

	async Task DeleteTeam()
	{
		await DruzynyService.DeleteTeam(team.IdDruzyny);
	}

	async Task OnFileChangeLogo(InputFileChangeEventArgs e)
	{
		var format = "img/png";
		var resizedImage = await e.File.RequestImageFileAsync(format, 200, 200);
		var buffer = new byte[resizedImage.Size];
		await resizedImage.OpenReadStream().ReadAsync(buffer);
		var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
		team.Logo= imageData;
	}

	async Task OnFileChangeImage(InputFileChangeEventArgs e)
	{
		var format = "img/png";
		var resizedImage = await e.File.RequestImageFileAsync(format, 200, 200);
		var buffer = new byte[resizedImage.Size];
		await resizedImage.OpenReadStream().ReadAsync(buffer);
		var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
		team.ZdjecieZawodnikow= imageData;
	}
}
