@using MySql.Data.MySqlClient;
@using System.Data;
@using MySql.Data;

@page "/gracze/{nick}"
@inject IGraczeService GraczeService
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Administrator, User")]
<PageTitle>Moje dane</PageTitle>



<h3>@player.Nick</h3>


<div class="table">
    <table class="table">
        <tr>
            <th>Dywizja</th>
            <th>Poziom</th>
            <th>Ulubiony bohater</th>
            <th>Procent wygranych</th>
            <th>Średnie KDA</th>
        </tr>
        <tr>
            <td>@player.Dywizja</td>
            <td>@player.Poziom</td>
            <td>@player.UlubionyBohater</td>
            <td>WIN RATE PLACEHOLDER</td>
            <td>AVG KDA PLACEHOLDER</td>
        </tr>
    </table>
</div>


<br />
<br />

<div class="table">
    <table class="table">
        <thead>
            <tr>
                <th>Id meczu</th>
                <th>Rezultat</th>
                <th>Zabójstwa/Śmierci/Asysty</th>
                <th>CS</th>
                <th>Zdobyte złoto</th>
                <th>Czas gry</th>
                <th>Zadane obrażenia</th>
                <th>Strona</th>
                <th>Bohater</th>
            </tr>
        </thead>
        <tbody>
                @foreach (var game in player.GryIdMeczus)
                {
                    
                    <tr>
                        <td>@game.IdMeczu</td>
                        <td>@game.Rezultat</td>
                        <td>@game.Zabojstwa/@game.Smierci/@game.Asysty</td>
                        <td>@game.Creep_score</td>
                        <td>@game.ZdobyteZloto</td>
                        <td>@game.CzasGry</td>
                        <td>@game.ZadaneObrazenia</td>
                        <td>@game.Strona</td>
                        <td>@game.BohaterowieNazwa</td>
                    </tr>
                }   
        </tbody>
    </table>
</div>


@code
{
    //public override System.Data.CommandType CommandType { get; set; }

    //public GraczeInfo(CommandType commandType)
    //{
    //    CommandType = commandType;
    //}

    [Parameter]
    public string? nick { get; set; }

    public float wr { get; set; }

    Gracze player = new Gracze();

    protected override async Task OnParametersSetAsync()
    {
        player = await GraczeService.GetPlayer(nick);

        if (nick != null)
        {
            //CalculateWr("getWinPercentage", nick);

        }
    }

    void ShowEditPlayer(string nick)
    {
        NavigationManager.NavigateTo($"gracze/edit/{nick}");
    }

    static void CalculateWr(string functionName, string nick)
    {
        string connectionString = "server=127.0.0.1;uid=root;pwd=lolinfodb_root;database=lolinfo";

        using (MySqlConnection connection = new MySqlConnection(connectionString))
        {
            if (string.IsNullOrEmpty(functionName))
            {
                throw new ArgumentException("Function name cannot be null or empty", "functionName");
            }

            if (string.IsNullOrEmpty(nick))
            {
                throw new ArgumentException("Nick cannot be null or empty", "nick");
            }

            connection.Open();
            using (MySqlCommand command = new MySqlCommand(functionName, connection))
            {
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = functionName;
                command.Connection = connection;
                command.Parameters.AddWithValue("@nick", nick);
                command.ExecuteNonQuery();

                //command.CommandType = CommandType.Text;
                //command.CommandText = "CALL " + functionName + "(@nick)";
                //command.Parameters.AddWithValue("@nick", nick);
                //command.ExecuteNonQuery();
            }

            connection.Close();
        }
    }

  
}