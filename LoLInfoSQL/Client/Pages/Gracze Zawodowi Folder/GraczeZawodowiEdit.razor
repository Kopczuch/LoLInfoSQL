@page "/graczezawodowi/edit/{nick}"
@page "/graczezawodowi/edit"
@attribute [Authorize(Roles = "Administrator")]

@inject IGraczeZawodowiService GraczeZawodowiService
@inject IBohaterowieService BohaterowieService
@inject IDruzynyService DruzynyService

@if (nick == null)
{
	<PageTitle>Dodaj</PageTitle>
	<h3>Dodaj gracza zawodowego</h3>
}
else
{
	<PageTitle>Edytuj</PageTitle>
	<h3>Edytuj @proplayer.Nick</h3>
}

<EditForm Model="proplayer" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator/>
	@if (nick == null)
	{
		<div>
			<label for="nick">Nick</label>
			<InputText id="nick" @bind-Value="proplayer.Nick" class="form-control"></InputText>
			<ValidationMessage For="@(() => proplayer.Nick)" />
		</div>
	}

	<div>
		<label for="imieinazwisko">Imię i nazwisko</label>
		<InputText id="imieinazwisko" @bind-Value="proplayer.ImieINazwisko" class="form-control"></InputText>
		<ValidationMessage For="@(() => proplayer.ImieINazwisko)" />
	</div>
	<div>
		<img src="@proplayer.Zdjecie" class="rounded" style="max-height: 200px;" />
	</div>
	<div>
		<label for="zdjecie">Zdjęcie</label>
		<InputFile OnChange="OnFileChange" class="form-control"></InputFile>
	</div>
	<div>
		<label for="kraj">Kraj</label>
		<InputText id="kraj" @bind-Value="proplayer.Kraj" class="form-control"></InputText>
		<ValidationMessage For="@(() => proplayer.Kraj)" />
	</div>
	<div>
		<label for="dataurodzenia">Data urodzenia</label>
		<InputDate id="dataurodzenia" @bind-Value="proplayer.DataUrodzin" class="form-control"></InputDate>
	</div>
	<div>
		<label for="rezydencja">Rezydencja</label>
		<InputSelect id="rezydencja" @bind-Value="proplayer.Rezydencja" class="form-control">
			@foreach (var residency in residencies)
			{
				<option value="@residency">@residency</option>
			}
		</InputSelect>
	</div>
	<div>
		<label for="iddruzyny">Id drużyny</label>
		<InputSelect id="iddruzyny" @bind-Value="proplayer.IdDruzyny" class="form-control">
			@foreach (var team in teamsList)
			{
				<option value="@team.IdDruzyny">@team.IdDruzyny</option>
			}
		</InputSelect>
	</div>
	<div>
		<label for="rola">Rola</label>
		<InputSelect id="rola" @bind-Value="proplayer.Rola" class="form-control">
			@foreach (var role in rolesList)
			{
				<option value="@role">@role</option>
			}
		</InputSelect>
	</div>
	<div>
		<label for="ulubionybohater">Ulubiony bohater</label>
		<InputSelect id="ulubionybohater" @bind-Value="proplayer.UlubionyBohater" class="form-control">
			@foreach (var champion in championsList)
			{
				<option value="@champion.Nazwa">@champion.Nazwa</option>
			}
		</InputSelect>
	</div>
	<br />
	<button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit">@btnText</button>
	<button type="button" class="btn btn-danger" @onclick="DeleteProPlayer">Usuń gracza zawodowego</button>
</EditForm>



@code
{
	string btnText = string.Empty;

	[Parameter]
	public string? nick { get; set; }

	GraczeZawodowi proplayer = new GraczeZawodowi();

	List<string> rolesList = new List<string>
	{
		"Top Laner",
		"Jungler",
		"Mid Laner",
		"Bot Laner",
		"Support"
	};

	List<string> residencies = new List<string>
	{
		"North America",
		"EMEA",
		"Europe",
		"Turkey",
		"CIS",
		"Korea",
		"China",
		"PCS",
		"Brazil",
		"Japan",
		"Latin America",
		"Oceania",
		"Vietnam"
	};

	List<Bohaterowie> championsList = new List<Bohaterowie>();

	List<Druzyny> teamsList = new List<Druzyny>();

	protected override async Task OnInitializedAsync()
	{
		btnText = nick == null ? "Zapisz nowego gracza zawodowego" : "Aktualizuj gracza zawodowego";

		await GraczeZawodowiService.GetProPlayers();

		await BohaterowieService.GetChampions();
		championsList = BohaterowieService.Champions;

		await DruzynyService.GetTeams();
		teamsList = DruzynyService.Teams;
	}

	protected override async Task OnParametersSetAsync()
	{
		if (!String.IsNullOrEmpty(nick))
		{
			proplayer = await GraczeZawodowiService.GetSingleProPlayer(nick);
		}
	}

	async Task HandleValidSubmit()
	{
		if (nick == null)
		{
			await GraczeZawodowiService.CreateProPlayer(proplayer);
		}
		else
		{
			await GraczeZawodowiService.UpdateProPlayer(proplayer);
		}

	}

	async Task OnFileChange(InputFileChangeEventArgs e)
	{
		var format = "img/png";
		var resizedImage = await e.File.RequestImageFileAsync(format, 200, 200);
		var buffer = new byte[resizedImage.Size];
		await resizedImage.OpenReadStream().ReadAsync(buffer);
		var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
		proplayer.Zdjecie = imageData;
	}

	async Task DeleteProPlayer()
	{
		await GraczeZawodowiService.DeleteProPlayer(proplayer.Nick);
	}
}
