@page "/przedmioty/edit/{name}"
@page "/przedmioty/edit"

@inject IPrzedmiotyService PrzedmiotyService

@if (name == null)
{
	<PageTitle>Dodaj</PageTitle>
	<h3>Dodaj przedmiot</h3>
}
else
{
	<PageTitle>Edytuj</PageTitle>
	<h3>Edytuj @item.Nazwa</h3>
}


<EditForm Model="item" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator/>
	<div>
		<label for="nazwa">Nazwa</label>
		<InputText id="nazwa" @bind-Value="item.Nazwa" class="form-control"></InputText>
		<ValidationMessage For="@(() => item.Nazwa)" />
	</div>
	<div>
		<label for="statystyki">Statystyki</label>
		<InputText id="statystyki" @bind-Value="item.Statystyki" class="form-control"></InputText>
		<ValidationMessage For="@(() => item.Statystyki)" />
	</div>
@*	<div>
		<label for="ikona">Ikona</label>
		<InputText id="ikona" @bind-Value="item.Ikona" class="form-control"></InputText>
	</div>*@
	<div>
		<label for="ikona">Ikona</label>
		<InputFile OnChange="OnFileChange" class="form-control"></InputFile>
		<ValidationMessage For="@(() => item.Ikona)" />
	</div>
	<div>
		<label for="cena">Cena</label>
		<InputNumber id="cena" @bind-Value="item.Cena" class="form-control" min=0></InputNumber>
		<ValidationMessage For="@(() => item.Cena)" />
	</div>
	<div>
		<label for="wartoscsprzedazy">Wartość sprzedaży</label>
		<InputNumber id="wartoscsprzedazy" @bind-Value="item.WartoscSprzedazy" class="form-control" min=0></InputNumber>
		<ValidationMessage For="@(() => item.WartoscSprzedazy)" />
	</div>
	<button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit">@btnText</button>
	<button type="button" class="btn btn-danger" @onclick="DeleteTeam">Usuń przedmiot</button>
</EditForm>

@code
{
	string btnText = string.Empty;

	[Parameter]
	public string? name { get; set; }

	Przedmioty item = new Przedmioty();

	List<Przedmioty> items = new List<Przedmioty>();

	protected override async Task OnInitializedAsync()
	{
		btnText = name == null ? "Zapisz nowy przedmiot" : "Aktualizuj przedmiot";

		await PrzedmiotyService.GetItems();

		items = PrzedmiotyService.Items;
	}

	protected override async Task OnParametersSetAsync()
	{
		if (!String.IsNullOrEmpty(name))
		{
			item = await PrzedmiotyService.GetSingleItem(name);
		}
	}

	async Task HandleValidSubmit()
	{
		if (name == null)
		{
			var lastItem = items.Last();
			item.IdPrzed = lastItem.IdPrzed + 1;
			await PrzedmiotyService.CreateItem(item);
		}
		else
		{
			await PrzedmiotyService.UpdateItem(item);
		}

	}

	async Task DeleteTeam()
	{
		await PrzedmiotyService.DeleteItem(item.Nazwa);
	}

	async Task OnFileChange(InputFileChangeEventArgs e)
	{
		var format = "img/png";
		var resizedImage = await e.File.RequestImageFileAsync(format, 200, 200);
		var buffer = new byte[resizedImage.Size];
		await resizedImage.OpenReadStream().ReadAsync(buffer);
		var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
		item.Ikona= imageData;
	}
}
